<?xml version="1.0" encoding="UTF-8"?>

<project name="createSiteContainer" default="create">

    <!-- Load configuration -->
    <property file="./build.properties" />

    <!-- ============================================  -->
    <!-- (DEFAULT)  Target: Create a site container    -->
    <!-- ============================================  -->

    <target name="prepare">
        <echo msg="Making directory ./build" />
        <mkdir dir="./build/${siteurl}" />
    </target>

    <target name="getport" depends="prepare" >
        <taskdef name="getport" classname="tasks.getPortTask" />
        <getport port="49153" />
        <echo msg="Container port is: ${config.usePort}" />
    </target>

    <target name="run" depends="getport" >
        <exec command="${progs.docker} run -d -p ${config.usePort}:80 --name=${siteurl} ellie/lemp:latest" outputProperty="siteRunning"/>
        <echo msg="Site Running ${siteRunning}" />
    </target>

    <target name="info" depends="run" >
        <exec command="${progs.docker} inspect ${siteurl} > ./build/${siteurl}/container.txt" />
        <echo msg="Site File Created" />
    </target>

    <target name="parse-info" depends="info" >
        <taskdef name="parsejson" classname="tasks.parseJsonTask" />
        <loadfile property="containerinfo" file="./build/${siteurl}/container.txt"/>
        <parsejson jsonfile="${containerinfo}" />
    </target>

    <target name="sqlfile" depends="parse-info" >
        <echo msg="UPDATE sites SET
            status='running',
            container='${site.container.data}',
            host_ip='${site.host.ip}',
            container_id='${site.container.id}',
            container_ip='${site.container.ip}',
            container_image='${site.container.image}',
            container_port='${site.container.port}'
            WHERE id=${siteid}
            AND userid=${siteuid}"
            file="./build/${siteurl}/container.sql" />
        <echo msg="SQL file created" />
    </target>

    <target name="pause" depends="sqlfile" >
        <taskdef name="sleepcheck" classname="tasks.sleepTask" />
        <sleepcheck amount="5" />
        <echo msg="Ok Lets keep going" />
    </target>

    <target name="sitecheck" depends="pause" >
        <if>
            <istrue value="${config.runCheck}"/>
            <then>
                <exec command="${progs.curl} -sL -w '%{http_code}' '${site.host.ip}:${site.container.port}' -o /dev/null" outputProperty="config.siteCheck"/>
                <echo msg="${config.siteCheck}" />
            </then>
            <else>
                <echo msg="couldn't run site check for some reason" />
            </else>
        </if>
    </target>

    <target name="store" depends="sitecheck" >
        <if>
            <equals arg1="${config.siteCheck}" arg2="200" />
            <then>
                <property name="config.siteRunning" value="true" override="true" />
                <exec command="${progs.mysql} -u${db.user} -p${db.pass} ${db.name} &lt; ./build/${siteurl}/container.sql" />
                <echo msg="Site is running and info is stored" />
            </then>
            <else>
                <echo msg="The site check failed for some reason" />
            </else>
        </if>
    </target>

    <target name="update_site" depends="store" >
        <if>
            <istrue value="${config.siteRunning}"/>
            <then>
                <echo msg="Site is being updates" />
                <exec command="${progs.docker} exec ${siteurl} ${config.siteUpdateScript} " />
                <property name="config.siteUpdated" value="true" override="true" />
            </then>
            <else>
                <echo msg="The site is running but cannot update" />
            </else>
        </if>
    </target>

    <target name="init_site" depends="update_site" >
        <if>
            <istrue value="${config.siteUpdated}"/>
            <then>
                <echo msg="Site is being configured" />
                <exec command="${progs.docker} exec ${siteurl} ${config.siteConfigScript} &quot;${sitename}&quot; &quot;${sitecolor}&quot; &quot;${sitetemplate}&quot; " />
                <property name="config.siteInitialized" value="true" override="true" />
            </then>
            <else>
                <echo msg="The site was updated but cannot initialize ${config.siteRunning}" />
            </else>
        </if>
    </target>

    <target name="init_check" depends="init_site" >
        <if>
            <istrue value="${config.siteInitialized}"/>
            <then>
                <exec command="${progs.mysql} -u${db.user} -p${db.pass} ${db.name} -e &quot;UPDATE sites SET status=&apos;ready&apos; WHERE id=${siteid}&quot;"  />
                <echo msg="Site has been initialized" />
            </then>
            <else>
                <echo msg="The site is running but was not initialize ${config.siteInitialized}" />
            </else>
        </if>
    </target>

    <target name="cleanup_create" depends="init_check" >
        <delete dir="./build/${siteurl}" includeemptydirs="true" verbose="true" failonerror="true" />
        <echo msg="Deleted build dir" />
    </target>

    <target name="create" depends="cleanup_create" >
        <echo msg="Site Created" />
    </target>

    <!-- ============================================  -->
    <!-- Target: destroy a site container              -->
    <!-- ============================================  -->
    <target name="destroy" >
        <exec command="docker stop ${siteurl} &amp;&amp; docker rm ${siteurl}" />
        <echo msg="Site Removed" />
    </target>

    <!-- ============================================  -->
    <!-- Target: restart a site container              -->
    <!-- ============================================  -->
    <target name="restart" >
        <exec command="docker restart ${siteurl}" />
        <echo msg="Site Restarted" />
    </target>

    <!-- ============================================  -->
    <!-- Target: update site             -->
    <!-- ============================================  -->
    <target name="update" >
        <exec command="${progs.docker} exec ${siteurl} ${config.siteUpdateScript}" passthru="true" />
        <echo msg="Site Updated" />
    </target>

</project>